43f186d1d414b69c96569597e24f8f18
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ProyectCreator_1 = require("../../../../../src/contexts/proyects/proyect/application/ProyectCreator");
const TechnologyMapper_1 = require("../../../../../src/contexts/proyects/proyect/application/TechnologyMapper");
const Technology_1 = require("../../../../../src/contexts/proyects/proyect/domain/Technology");
const Proyect_1 = require("../../../../../src/contexts/proyects/proyect/domain/Proyect");
describe('ProyectCreator', () => {
    it('should create a valid proyect', () => __awaiter(void 0, void 0, void 0, function* () {
        const repository = {
            save: jest.fn()
        };
        const creator = new ProyectCreator_1.ProyectCreator(repository);
        const id = "id";
        const name = "proyect1";
        const category = "social sector";
        const description = "application for help older people to deal with loneliness";
        const tags = ["health care", "older people"];
        const technologies = {
            frontEnd: ["angular", "scss"],
            back_end: ["Java", "Spring"],
            data_science: ["Python"]
        };
        const experienceLevel = 1;
        const team = [''];
        const technologyCommand = TechnologyMapper_1.TechnologyMapper.toCommand(technologies.frontEnd, technologies.back_end, technologies.data_science);
        const expectedTechnology = new Technology_1.Technology(technologies.frontEnd, technologies.back_end, technologies.data_science);
        const expectedProyect = new Proyect_1.Proyect(id, name, category, description, tags, expectedTechnology, experienceLevel, team);
        console.log('tec', technologyCommand);
        console.log('exp', expectedTechnology);
        console.log('expec', expectedProyect);
        yield creator.run(id, name, category, description, tags, technologyCommand, experienceLevel, team);
        expect(repository.save).toHaveBeenCalledWith(expectedProyect);
    }));
});
